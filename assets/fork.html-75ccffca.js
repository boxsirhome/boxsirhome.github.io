import{_ as e,o as n,c as o,a as l,d as s,e as a,f as p}from"./app-c4ddd265.js";const c={},r=s("blockquote",null,[s("p",null,[a("当你 "),s("code",null,"Fork"),a(" 了一个项目并进行了二次开发，如果原始项目有更新，你可以将原项目的更新合并到你自己的 "),s("code",null,"Fork"),a(" 项目中。"),s("br"),a(" 这个过程通常包括以下几个步骤：")])],-1),d=p(`<h2 id="配置原项目的远程仓库-upstream" tabindex="-1"><a class="header-anchor" href="#配置原项目的远程仓库-upstream" aria-hidden="true">#</a> 配置原项目的远程仓库 (Upstream)</h2><blockquote><p>首先，你需要将原项目（也称为 <code>upstream</code>）配置为你 <code>Fork</code> 项目的远程仓库之一，这样可以从原项目拉取最新的代码。</p></blockquote><p>1.打开你 <code>Fork</code> 项目的目录。</p><p>2.使用以下命令添加原始项目（<code>upstream</code>）为远程仓库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">remote</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">upstream</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">https://gitee.com/原项目路径.git</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你是在 GitHub 上：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">remote</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">upstream</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">https://github.com/原项目路径.git</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.确认 <code>upstream</code> 已成功添加：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">remote</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-v</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你应该可以看到 <code>origin</code>（你的 <code>Fork</code>仓库）和 <code>upstream</code>（原始项目）的信息。</p><h2 id="从原项目获取最新代码" tabindex="-1"><a class="header-anchor" href="#从原项目获取最新代码" aria-hidden="true">#</a> 从原项目获取最新代码</h2><blockquote><p>接下来，你需要从 <code>upstream</code> 仓库拉取原始项目的更新。</p></blockquote><p>1.拉取原项目的最新更新：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">fetch</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">upstream</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.切换到你的本地主分支（假设为 <code>main</code> 或 <code>master</code>）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">checkout</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.将 <code>upstream</code> 的主分支与本地的 <code>main</code> 分支合并：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">merge</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">upstream/main</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果原项目的主分支是 <code>master</code>，则使用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">merge</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">upstream/master</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="解决冲突-如有" tabindex="-1"><a class="header-anchor" href="#解决冲突-如有" aria-hidden="true">#</a> 解决冲突（如有）</h2><blockquote><p>如果你在 <code>Fork</code> 项目中进行了二次开发，有可能在合并时出现代码冲突。此时，你需要手动解决冲突。</p></blockquote><p>1.Git 会提示哪些文件存在冲突，打开这些文件并手动解决冲突。</p><p>2.解决冲突后，添加解决的文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">冲突文</span><span style="color:#ABB2BF;">件&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.提交合并结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">commit</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-m</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;合并 upstream 到本地&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="推送更新到你的-fork-仓库" tabindex="-1"><a class="header-anchor" href="#推送更新到你的-fork-仓库" aria-hidden="true">#</a> 推送更新到你的 Fork 仓库</h2><blockquote><p>完成本地合并并解决冲突后，你可以将这些更改推送到你的 <code>Fork</code> 仓库。</p></blockquote><p>推送本地更改到远程 <code>origin</code> 仓库（即你的 <code>Fork</code> 项目）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">push</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">origin</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">main</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者，如果主分支是 <code>master</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki one-dark-pro" style="background-color:#282c34;" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">push</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">origin</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">master</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,33);function i(t,u){return n(),o("div",null,[r,l(" more "),d])}const m=e(c,[["render",i],["__file","fork.html.vue"]]);export{m as default};
